"""
Simplified utility functions for PromptAgro backend
File validation and basic operations
"""

import os
import time
from typing import Dict, Any

# Supported image formats
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

def validate_image(file) -> bool:
    """
    Validate uploaded image file
    Returns True if valid, False otherwise
    """
    try:
        # Check file extension
        if hasattr(file, 'filename') and file.filename:
            _, ext = os.path.splitext(file.filename.lower())
            if ext not in ALLOWED_EXTENSIONS:
                return False
        
        # Check MIME type
        if hasattr(file, 'content_type') and file.content_type:
            if not file.content_type.startswith('image/'):
                return False
        
        return True
    
    except Exception:
        return False

async def create_pdf_report(
    design_id: str, 
    mockup_data: Dict[str, Any], 
    concepts: Dict[str, Any], 
    product_data: Dict[str, Any]
) -> str:
    """
    Create simple text-based design report
    Returns path to generated report
    """
    try:
        report_filename = f"design_report_{design_id}.txt"
        report_path = f"storage/designs/{design_id}/{report_filename}"
        
        # Ensure directory exists
        os.makedirs(os.path.dirname(report_path), exist_ok=True)
        
        # Create simple text-based report
        report_content = f"""PromptAgro Design Report
=======================

Product Information:
- Product Name: {product_data.get('productName', 'N/A')}
- Design ID: {design_id}
- Processing Time: {mockup_data.get('processing_time', 0):.2f}s

Design Concepts:
{chr(10).join(f"- {concept}" for concept in concepts.get('text_concepts', [])[:3])}

Style Suggestions:
{chr(10).join(f"- {style}" for style in concepts.get('style_suggestions', [])[:3])}

Color Palette:
{chr(10).join(f"- {color}" for color in concepts.get('color_palette', [])[:4])}

Generated by PromptAgro â€¢ Visit promptagro.com
"""
        
        # Save report
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return report_path
    
    except Exception as e:
        print(f"Report generation error: {e}")
        return "static/sample-design.txt"

def generate_design_filename(product_name: str, design_type: str = "mockup") -> str:
    """Generate unique filename for design files"""
    safe_name = "".join(c for c in product_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    safe_name = safe_name.replace(' ', '_').lower()
    timestamp = int(time.time())
    return f"{safe_name}_{design_type}_{timestamp}"

def sanitize_filename(filename: str) -> str:
    """Sanitize filename for safe storage"""
    import re
    # Remove invalid characters
    filename = re.sub(r'[<>:"/\\|?*]', '', filename)
    # Limit length
    if len(filename) > 100:
        name, ext = os.path.splitext(filename)
        filename = name[:90] + ext
    return filename
