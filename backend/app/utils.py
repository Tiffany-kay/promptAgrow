"""
Utility functions for PromptAgro backend
File validation, PDF generation, image processing
"""

import os
import magic
from typing import Dict, Any
from fastapi import UploadFile
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from PIL import Image
import io

# Supported image formats
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'}
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

def validate_image(file: UploadFile) -> bool:
    """
    Validate uploaded image file
    Returns True if valid, False otherwise
    """
    try:
        # Check file extension
        if file.filename:
            _, ext = os.path.splitext(file.filename.lower())
            if ext not in ALLOWED_EXTENSIONS:
                return False
        
        # Check MIME type
        if not file.content_type or not file.content_type.startswith('image/'):
            return False
        
        return True
    
    except Exception:
        return False

async def create_pdf_report(
    design_id: str, 
    mockup_data: Dict[str, Any], 
    concepts: Dict[str, Any], 
    product_data: Dict[str, Any]
) -> str:
    """
    Create PDF report with design details
    Returns path to generated PDF
    """
    try:
        pdf_filename = f"design_report_{design_id}.pdf"
        pdf_path = f"storage/designs/{design_id}/{pdf_filename}"
        
        # Ensure directory exists
        os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
        
        # Create PDF
        c = canvas.Canvas(pdf_path, pagesize=letter)
        width, height = letter
        
        # Title
        c.setFont("Helvetica-Bold", 24)
        c.drawString(50, height - 50, "PromptAgro Design Report")
        
        # Product Information
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 100, "Product Information")
        c.setFont("Helvetica", 12)
        c.drawString(50, height - 130, f"Product Name: {product_data.get('productName', 'N/A')}")
        c.drawString(50, height - 150, f"Design ID: {design_id}")
        c.drawString(50, height - 170, f"Processing Time: {mockup_data.get('processing_time', 0):.2f}s")
        
        # Design Concepts
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 220, "Design Concepts")
        c.setFont("Helvetica", 12)
        
        y_pos = height - 250
        text_concepts = concepts.get('text_concepts', [])
        for i, concept in enumerate(text_concepts[:3]):
            c.drawString(50, y_pos, f"{i+1}. {concept}")
            y_pos -= 20
        
        # Style Information
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 350, "Style Suggestions")
        c.setFont("Helvetica", 12)
        
        y_pos = height - 380
        style_suggestions = concepts.get('style_suggestions', [])
        for style in style_suggestions[:3]:
            c.drawString(50, y_pos, f"• {style}")
            y_pos -= 20
        
        # Color Palette
        c.setFont("Helvetica-Bold", 16)
        c.drawString(50, height - 480, "Color Palette")
        c.setFont("Helvetica", 12)
        
        y_pos = height - 510
        color_palette = concepts.get('color_palette', [])
        for color in color_palette[:4]:
            c.drawString(50, y_pos, f"• {color}")
            y_pos -= 20
        
        # Footer
        c.setFont("Helvetica", 10)
        c.drawString(50, 50, f"Generated by PromptAgro • Design ID: {design_id}")
        c.drawString(50, 30, "Visit promptagro.com for more agricultural packaging solutions")
        
        c.save()
        return pdf_path
    
    except Exception as e:
        print(f"PDF generation error: {e}")
        # Return sample PDF path
        return "static/sample-design.pdf"

def resize_image(image_path: str, max_width: int = 800, max_height: int = 600) -> str:
    """
    Resize image to specified dimensions
    Returns path to resized image
    """
    try:
        with Image.open(image_path) as img:
            # Calculate new dimensions
            img.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
            
            # Save resized image
            resized_path = image_path.replace('.', '_resized.')
            img.save(resized_path, quality=85, optimize=True)
            
            return resized_path
    
    except Exception as e:
        print(f"Image resize error: {e}")
        return image_path

def get_image_info(image_path: str) -> Dict[str, Any]:
    """
    Get image information (dimensions, format, size)
    """
    try:
        with Image.open(image_path) as img:
            return {
                "width": img.width,
                "height": img.height,
                "format": img.format,
                "mode": img.mode,
                "size_bytes": os.path.getsize(image_path)
            }
    except Exception:
        return {}

def create_thumbnail(image_path: str, size: tuple = (150, 150)) -> str:
    """
    Create thumbnail of image
    Returns path to thumbnail
    """
    try:
        with Image.open(image_path) as img:
            img.thumbnail(size, Image.Resampling.LANCZOS)
            
            thumbnail_path = image_path.replace('.', '_thumb.')
            img.save(thumbnail_path, quality=75)
            
            return thumbnail_path
    
    except Exception as e:
        print(f"Thumbnail creation error: {e}")
        return image_path

def generate_design_filename(product_name: str, design_type: str = "mockup") -> str:
    """Generate unique filename for design files"""
    safe_name = "".join(c for c in product_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    safe_name = safe_name.replace(' ', '_').lower()
    timestamp = int(time.time())
    return f"{safe_name}_{design_type}_{timestamp}"

def validate_color_hex(color: str) -> bool:
    """Validate hex color format"""
    if not color.startswith('#'):
        return False
    if len(color) not in [4, 7]:  # #RGB or #RRGGBB
        return False
    try:
        int(color[1:], 16)
        return True
    except ValueError:
        return False

def sanitize_filename(filename: str) -> str:
    """Sanitize filename for safe storage"""
    import re
    # Remove invalid characters
    filename = re.sub(r'[<>:"/\\|?*]', '', filename)
    # Limit length
    if len(filename) > 100:
        name, ext = os.path.splitext(filename)
        filename = name[:90] + ext
    return filename

import time
